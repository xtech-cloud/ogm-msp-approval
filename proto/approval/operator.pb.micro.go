// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/approval/operator.proto

package approval

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Operator service

type OperatorService interface {
	// 加入一个工作流
	Join(ctx context.Context, in *OperatorJoinRequest, opts ...client.CallOption) (*BlankResponse, error)
	// 离开一个工作流
	Leave(ctx context.Context, in *OperatorLeaveRequest, opts ...client.CallOption) (*BlankResponse, error)
	// 批量加入一个工作流
	BatchJoin(ctx context.Context, in *OperatorBatchJoinRequest, opts ...client.CallOption) (*BlankResponse, error)
	// 批量离开一个工作流
	BatchLeave(ctx context.Context, in *OperatorBatchLeaveRequest, opts ...client.CallOption) (*BlankResponse, error)
	// 列举一个工作流下的所有操作员
	List(ctx context.Context, in *OperatorListRequest, opts ...client.CallOption) (*OperatorListResponse, error)
	// 过滤一个操作员的所有工作流
	Filter(ctx context.Context, in *OperatorFilterRequest, opts ...client.CallOption) (*OperatorFilterResponse, error)
}

type operatorService struct {
	c    client.Client
	name string
}

func NewOperatorService(name string, c client.Client) OperatorService {
	return &operatorService{
		c:    c,
		name: name,
	}
}

func (c *operatorService) Join(ctx context.Context, in *OperatorJoinRequest, opts ...client.CallOption) (*BlankResponse, error) {
	req := c.c.NewRequest(c.name, "Operator.Join", in)
	out := new(BlankResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorService) Leave(ctx context.Context, in *OperatorLeaveRequest, opts ...client.CallOption) (*BlankResponse, error) {
	req := c.c.NewRequest(c.name, "Operator.Leave", in)
	out := new(BlankResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorService) BatchJoin(ctx context.Context, in *OperatorBatchJoinRequest, opts ...client.CallOption) (*BlankResponse, error) {
	req := c.c.NewRequest(c.name, "Operator.BatchJoin", in)
	out := new(BlankResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorService) BatchLeave(ctx context.Context, in *OperatorBatchLeaveRequest, opts ...client.CallOption) (*BlankResponse, error) {
	req := c.c.NewRequest(c.name, "Operator.BatchLeave", in)
	out := new(BlankResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorService) List(ctx context.Context, in *OperatorListRequest, opts ...client.CallOption) (*OperatorListResponse, error) {
	req := c.c.NewRequest(c.name, "Operator.List", in)
	out := new(OperatorListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorService) Filter(ctx context.Context, in *OperatorFilterRequest, opts ...client.CallOption) (*OperatorFilterResponse, error) {
	req := c.c.NewRequest(c.name, "Operator.Filter", in)
	out := new(OperatorFilterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Operator service

type OperatorHandler interface {
	// 加入一个工作流
	Join(context.Context, *OperatorJoinRequest, *BlankResponse) error
	// 离开一个工作流
	Leave(context.Context, *OperatorLeaveRequest, *BlankResponse) error
	// 批量加入一个工作流
	BatchJoin(context.Context, *OperatorBatchJoinRequest, *BlankResponse) error
	// 批量离开一个工作流
	BatchLeave(context.Context, *OperatorBatchLeaveRequest, *BlankResponse) error
	// 列举一个工作流下的所有操作员
	List(context.Context, *OperatorListRequest, *OperatorListResponse) error
	// 过滤一个操作员的所有工作流
	Filter(context.Context, *OperatorFilterRequest, *OperatorFilterResponse) error
}

func RegisterOperatorHandler(s server.Server, hdlr OperatorHandler, opts ...server.HandlerOption) error {
	type operator interface {
		Join(ctx context.Context, in *OperatorJoinRequest, out *BlankResponse) error
		Leave(ctx context.Context, in *OperatorLeaveRequest, out *BlankResponse) error
		BatchJoin(ctx context.Context, in *OperatorBatchJoinRequest, out *BlankResponse) error
		BatchLeave(ctx context.Context, in *OperatorBatchLeaveRequest, out *BlankResponse) error
		List(ctx context.Context, in *OperatorListRequest, out *OperatorListResponse) error
		Filter(ctx context.Context, in *OperatorFilterRequest, out *OperatorFilterResponse) error
	}
	type Operator struct {
		operator
	}
	h := &operatorHandler{hdlr}
	return s.Handle(s.NewHandler(&Operator{h}, opts...))
}

type operatorHandler struct {
	OperatorHandler
}

func (h *operatorHandler) Join(ctx context.Context, in *OperatorJoinRequest, out *BlankResponse) error {
	return h.OperatorHandler.Join(ctx, in, out)
}

func (h *operatorHandler) Leave(ctx context.Context, in *OperatorLeaveRequest, out *BlankResponse) error {
	return h.OperatorHandler.Leave(ctx, in, out)
}

func (h *operatorHandler) BatchJoin(ctx context.Context, in *OperatorBatchJoinRequest, out *BlankResponse) error {
	return h.OperatorHandler.BatchJoin(ctx, in, out)
}

func (h *operatorHandler) BatchLeave(ctx context.Context, in *OperatorBatchLeaveRequest, out *BlankResponse) error {
	return h.OperatorHandler.BatchLeave(ctx, in, out)
}

func (h *operatorHandler) List(ctx context.Context, in *OperatorListRequest, out *OperatorListResponse) error {
	return h.OperatorHandler.List(ctx, in, out)
}

func (h *operatorHandler) Filter(ctx context.Context, in *OperatorFilterRequest, out *OperatorFilterResponse) error {
	return h.OperatorHandler.Filter(ctx, in, out)
}

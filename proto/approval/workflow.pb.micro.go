// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/approval/workflow.proto

package approval

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Workflow service

type WorkflowService interface {
	// 创建一个工作流
	Make(ctx context.Context, in *WorkflowMakeRequest, opts ...client.CallOption) (*WorkflowMakeResponse, error)
	// 列举工作流
	List(ctx context.Context, in *WorkflowListRequest, opts ...client.CallOption) (*WorkflowListResponse, error)
	// 删除一个工作流
	Remove(ctx context.Context, in *WorkflowRemoveRequest, opts ...client.CallOption) (*BlankResponse, error)
	// 获取一个工作流信息
	Get(ctx context.Context, in *WorkflowGetRequest, opts ...client.CallOption) (*WorkflowGetResponse, error)
}

type workflowService struct {
	c    client.Client
	name string
}

func NewWorkflowService(name string, c client.Client) WorkflowService {
	return &workflowService{
		c:    c,
		name: name,
	}
}

func (c *workflowService) Make(ctx context.Context, in *WorkflowMakeRequest, opts ...client.CallOption) (*WorkflowMakeResponse, error) {
	req := c.c.NewRequest(c.name, "Workflow.Make", in)
	out := new(WorkflowMakeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowService) List(ctx context.Context, in *WorkflowListRequest, opts ...client.CallOption) (*WorkflowListResponse, error) {
	req := c.c.NewRequest(c.name, "Workflow.List", in)
	out := new(WorkflowListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowService) Remove(ctx context.Context, in *WorkflowRemoveRequest, opts ...client.CallOption) (*BlankResponse, error) {
	req := c.c.NewRequest(c.name, "Workflow.Remove", in)
	out := new(BlankResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowService) Get(ctx context.Context, in *WorkflowGetRequest, opts ...client.CallOption) (*WorkflowGetResponse, error) {
	req := c.c.NewRequest(c.name, "Workflow.Get", in)
	out := new(WorkflowGetResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Workflow service

type WorkflowHandler interface {
	// 创建一个工作流
	Make(context.Context, *WorkflowMakeRequest, *WorkflowMakeResponse) error
	// 列举工作流
	List(context.Context, *WorkflowListRequest, *WorkflowListResponse) error
	// 删除一个工作流
	Remove(context.Context, *WorkflowRemoveRequest, *BlankResponse) error
	// 获取一个工作流信息
	Get(context.Context, *WorkflowGetRequest, *WorkflowGetResponse) error
}

func RegisterWorkflowHandler(s server.Server, hdlr WorkflowHandler, opts ...server.HandlerOption) error {
	type workflow interface {
		Make(ctx context.Context, in *WorkflowMakeRequest, out *WorkflowMakeResponse) error
		List(ctx context.Context, in *WorkflowListRequest, out *WorkflowListResponse) error
		Remove(ctx context.Context, in *WorkflowRemoveRequest, out *BlankResponse) error
		Get(ctx context.Context, in *WorkflowGetRequest, out *WorkflowGetResponse) error
	}
	type Workflow struct {
		workflow
	}
	h := &workflowHandler{hdlr}
	return s.Handle(s.NewHandler(&Workflow{h}, opts...))
}

type workflowHandler struct {
	WorkflowHandler
}

func (h *workflowHandler) Make(ctx context.Context, in *WorkflowMakeRequest, out *WorkflowMakeResponse) error {
	return h.WorkflowHandler.Make(ctx, in, out)
}

func (h *workflowHandler) List(ctx context.Context, in *WorkflowListRequest, out *WorkflowListResponse) error {
	return h.WorkflowHandler.List(ctx, in, out)
}

func (h *workflowHandler) Remove(ctx context.Context, in *WorkflowRemoveRequest, out *BlankResponse) error {
	return h.WorkflowHandler.Remove(ctx, in, out)
}

func (h *workflowHandler) Get(ctx context.Context, in *WorkflowGetRequest, out *WorkflowGetResponse) error {
	return h.WorkflowHandler.Get(ctx, in, out)
}
